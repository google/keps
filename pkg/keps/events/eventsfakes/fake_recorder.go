// Code generated by counterfeiter. DO NOT EDIT.
package eventsfakes

import (
	sync "sync"

	events "github.com/calebamiles/keps/pkg/keps/events"
)

type FakeRecorder struct {
	RecordStub        func(events.Lifecycle, string, string) error
	recordMutex       sync.RWMutex
	recordArgsForCall []struct {
		arg1 events.Lifecycle
		arg2 string
		arg3 string
	}
	recordReturns struct {
		result1 error
	}
	recordReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecorder) Record(arg1 events.Lifecycle, arg2 string, arg3 string) error {
	fake.recordMutex.Lock()
	ret, specificReturn := fake.recordReturnsOnCall[len(fake.recordArgsForCall)]
	fake.recordArgsForCall = append(fake.recordArgsForCall, struct {
		arg1 events.Lifecycle
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Record", []interface{}{arg1, arg2, arg3})
	fake.recordMutex.Unlock()
	if fake.RecordStub != nil {
		return fake.RecordStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.recordReturns
	return fakeReturns.result1
}

func (fake *FakeRecorder) RecordCallCount() int {
	fake.recordMutex.RLock()
	defer fake.recordMutex.RUnlock()
	return len(fake.recordArgsForCall)
}

func (fake *FakeRecorder) RecordCalls(stub func(events.Lifecycle, string, string) error) {
	fake.recordMutex.Lock()
	defer fake.recordMutex.Unlock()
	fake.RecordStub = stub
}

func (fake *FakeRecorder) RecordArgsForCall(i int) (events.Lifecycle, string, string) {
	fake.recordMutex.RLock()
	defer fake.recordMutex.RUnlock()
	argsForCall := fake.recordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRecorder) RecordReturns(result1 error) {
	fake.recordMutex.Lock()
	defer fake.recordMutex.Unlock()
	fake.RecordStub = nil
	fake.recordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRecorder) RecordReturnsOnCall(i int, result1 error) {
	fake.recordMutex.Lock()
	defer fake.recordMutex.Unlock()
	fake.RecordStub = nil
	if fake.recordReturnsOnCall == nil {
		fake.recordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.recordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.recordMutex.RLock()
	defer fake.recordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ events.Recorder = new(FakeRecorder)
