// Code generated by counterfeiter. DO NOT EDIT.
package changesetfakes

import (
	sync "sync"

	changeset "github.com/calebamiles/keps/pkg/changes/changeset"
)

type FakeDescription struct {
	FullDescriptionStub        func() string
	fullDescriptionMutex       sync.RWMutex
	fullDescriptionArgsForCall []struct {
	}
	fullDescriptionReturns struct {
		result1 string
	}
	fullDescriptionReturnsOnCall map[int]struct {
		result1 string
	}
	ReceiptStub        func() string
	receiptMutex       sync.RWMutex
	receiptArgsForCall []struct {
	}
	receiptReturns struct {
		result1 string
	}
	receiptReturnsOnCall map[int]struct {
		result1 string
	}
	ShortSummaryStub        func() string
	shortSummaryMutex       sync.RWMutex
	shortSummaryArgsForCall []struct {
	}
	shortSummaryReturns struct {
		result1 string
	}
	shortSummaryReturnsOnCall map[int]struct {
		result1 string
	}
	TitleStub        func() string
	titleMutex       sync.RWMutex
	titleArgsForCall []struct {
	}
	titleReturns struct {
		result1 string
	}
	titleReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDescription) FullDescription() string {
	fake.fullDescriptionMutex.Lock()
	ret, specificReturn := fake.fullDescriptionReturnsOnCall[len(fake.fullDescriptionArgsForCall)]
	fake.fullDescriptionArgsForCall = append(fake.fullDescriptionArgsForCall, struct {
	}{})
	fake.recordInvocation("FullDescription", []interface{}{})
	fake.fullDescriptionMutex.Unlock()
	if fake.FullDescriptionStub != nil {
		return fake.FullDescriptionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fullDescriptionReturns
	return fakeReturns.result1
}

func (fake *FakeDescription) FullDescriptionCallCount() int {
	fake.fullDescriptionMutex.RLock()
	defer fake.fullDescriptionMutex.RUnlock()
	return len(fake.fullDescriptionArgsForCall)
}

func (fake *FakeDescription) FullDescriptionCalls(stub func() string) {
	fake.fullDescriptionMutex.Lock()
	defer fake.fullDescriptionMutex.Unlock()
	fake.FullDescriptionStub = stub
}

func (fake *FakeDescription) FullDescriptionReturns(result1 string) {
	fake.fullDescriptionMutex.Lock()
	defer fake.fullDescriptionMutex.Unlock()
	fake.FullDescriptionStub = nil
	fake.fullDescriptionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) FullDescriptionReturnsOnCall(i int, result1 string) {
	fake.fullDescriptionMutex.Lock()
	defer fake.fullDescriptionMutex.Unlock()
	fake.FullDescriptionStub = nil
	if fake.fullDescriptionReturnsOnCall == nil {
		fake.fullDescriptionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.fullDescriptionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) Receipt() string {
	fake.receiptMutex.Lock()
	ret, specificReturn := fake.receiptReturnsOnCall[len(fake.receiptArgsForCall)]
	fake.receiptArgsForCall = append(fake.receiptArgsForCall, struct {
	}{})
	fake.recordInvocation("Receipt", []interface{}{})
	fake.receiptMutex.Unlock()
	if fake.ReceiptStub != nil {
		return fake.ReceiptStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.receiptReturns
	return fakeReturns.result1
}

func (fake *FakeDescription) ReceiptCallCount() int {
	fake.receiptMutex.RLock()
	defer fake.receiptMutex.RUnlock()
	return len(fake.receiptArgsForCall)
}

func (fake *FakeDescription) ReceiptCalls(stub func() string) {
	fake.receiptMutex.Lock()
	defer fake.receiptMutex.Unlock()
	fake.ReceiptStub = stub
}

func (fake *FakeDescription) ReceiptReturns(result1 string) {
	fake.receiptMutex.Lock()
	defer fake.receiptMutex.Unlock()
	fake.ReceiptStub = nil
	fake.receiptReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) ReceiptReturnsOnCall(i int, result1 string) {
	fake.receiptMutex.Lock()
	defer fake.receiptMutex.Unlock()
	fake.ReceiptStub = nil
	if fake.receiptReturnsOnCall == nil {
		fake.receiptReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.receiptReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) ShortSummary() string {
	fake.shortSummaryMutex.Lock()
	ret, specificReturn := fake.shortSummaryReturnsOnCall[len(fake.shortSummaryArgsForCall)]
	fake.shortSummaryArgsForCall = append(fake.shortSummaryArgsForCall, struct {
	}{})
	fake.recordInvocation("ShortSummary", []interface{}{})
	fake.shortSummaryMutex.Unlock()
	if fake.ShortSummaryStub != nil {
		return fake.ShortSummaryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.shortSummaryReturns
	return fakeReturns.result1
}

func (fake *FakeDescription) ShortSummaryCallCount() int {
	fake.shortSummaryMutex.RLock()
	defer fake.shortSummaryMutex.RUnlock()
	return len(fake.shortSummaryArgsForCall)
}

func (fake *FakeDescription) ShortSummaryCalls(stub func() string) {
	fake.shortSummaryMutex.Lock()
	defer fake.shortSummaryMutex.Unlock()
	fake.ShortSummaryStub = stub
}

func (fake *FakeDescription) ShortSummaryReturns(result1 string) {
	fake.shortSummaryMutex.Lock()
	defer fake.shortSummaryMutex.Unlock()
	fake.ShortSummaryStub = nil
	fake.shortSummaryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) ShortSummaryReturnsOnCall(i int, result1 string) {
	fake.shortSummaryMutex.Lock()
	defer fake.shortSummaryMutex.Unlock()
	fake.ShortSummaryStub = nil
	if fake.shortSummaryReturnsOnCall == nil {
		fake.shortSummaryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.shortSummaryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) Title() string {
	fake.titleMutex.Lock()
	ret, specificReturn := fake.titleReturnsOnCall[len(fake.titleArgsForCall)]
	fake.titleArgsForCall = append(fake.titleArgsForCall, struct {
	}{})
	fake.recordInvocation("Title", []interface{}{})
	fake.titleMutex.Unlock()
	if fake.TitleStub != nil {
		return fake.TitleStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.titleReturns
	return fakeReturns.result1
}

func (fake *FakeDescription) TitleCallCount() int {
	fake.titleMutex.RLock()
	defer fake.titleMutex.RUnlock()
	return len(fake.titleArgsForCall)
}

func (fake *FakeDescription) TitleCalls(stub func() string) {
	fake.titleMutex.Lock()
	defer fake.titleMutex.Unlock()
	fake.TitleStub = stub
}

func (fake *FakeDescription) TitleReturns(result1 string) {
	fake.titleMutex.Lock()
	defer fake.titleMutex.Unlock()
	fake.TitleStub = nil
	fake.titleReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) TitleReturnsOnCall(i int, result1 string) {
	fake.titleMutex.Lock()
	defer fake.titleMutex.Unlock()
	fake.TitleStub = nil
	if fake.titleReturnsOnCall == nil {
		fake.titleReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.titleReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDescription) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fullDescriptionMutex.RLock()
	defer fake.fullDescriptionMutex.RUnlock()
	fake.receiptMutex.RLock()
	defer fake.receiptMutex.RUnlock()
	fake.shortSummaryMutex.RLock()
	defer fake.shortSummaryMutex.RUnlock()
	fake.titleMutex.RLock()
	defer fake.titleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDescription) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ changeset.Description = new(FakeDescription)
