// Code generated by counterfeiter. DO NOT EDIT.
package gitfakes

import (
	sync "sync"

	auth "github.com/calebamiles/keps/pkg/changes/auth"
	git "github.com/calebamiles/keps/pkg/changes/git"
)

type FakeRepo struct {
	AddStub        func(string) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 string
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	CheckoutStub        func(string) error
	checkoutMutex       sync.RWMutex
	checkoutArgsForCall []struct {
		arg1 string
	}
	checkoutReturns struct {
		result1 error
	}
	checkoutReturnsOnCall map[int]struct {
		result1 error
	}
	CommitStub        func(string, string, string) error
	commitMutex       sync.RWMutex
	commitArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	commitReturns struct {
		result1 error
	}
	commitReturnsOnCall map[int]struct {
		result1 error
	}
	PushOriginStub        func(auth.TokenProvider, string, string) error
	pushOriginMutex       sync.RWMutex
	pushOriginArgsForCall []struct {
		arg1 auth.TokenProvider
		arg2 string
		arg3 string
	}
	pushOriginReturns struct {
		result1 error
	}
	pushOriginReturnsOnCall map[int]struct {
		result1 error
	}
	SetOriginStub        func(string) error
	setOriginMutex       sync.RWMutex
	setOriginArgsForCall []struct {
		arg1 string
	}
	setOriginReturns struct {
		result1 error
	}
	setOriginReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepo) Add(arg1 string) error {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addReturns
	return fakeReturns.result1
}

func (fake *FakeRepo) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeRepo) AddCalls(stub func(string) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeRepo) AddArgsForCall(i int) string {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepo) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) Checkout(arg1 string) error {
	fake.checkoutMutex.Lock()
	ret, specificReturn := fake.checkoutReturnsOnCall[len(fake.checkoutArgsForCall)]
	fake.checkoutArgsForCall = append(fake.checkoutArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Checkout", []interface{}{arg1})
	fake.checkoutMutex.Unlock()
	if fake.CheckoutStub != nil {
		return fake.CheckoutStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkoutReturns
	return fakeReturns.result1
}

func (fake *FakeRepo) CheckoutCallCount() int {
	fake.checkoutMutex.RLock()
	defer fake.checkoutMutex.RUnlock()
	return len(fake.checkoutArgsForCall)
}

func (fake *FakeRepo) CheckoutCalls(stub func(string) error) {
	fake.checkoutMutex.Lock()
	defer fake.checkoutMutex.Unlock()
	fake.CheckoutStub = stub
}

func (fake *FakeRepo) CheckoutArgsForCall(i int) string {
	fake.checkoutMutex.RLock()
	defer fake.checkoutMutex.RUnlock()
	argsForCall := fake.checkoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepo) CheckoutReturns(result1 error) {
	fake.checkoutMutex.Lock()
	defer fake.checkoutMutex.Unlock()
	fake.CheckoutStub = nil
	fake.checkoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) CheckoutReturnsOnCall(i int, result1 error) {
	fake.checkoutMutex.Lock()
	defer fake.checkoutMutex.Unlock()
	fake.CheckoutStub = nil
	if fake.checkoutReturnsOnCall == nil {
		fake.checkoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) Commit(arg1 string, arg2 string, arg3 string) error {
	fake.commitMutex.Lock()
	ret, specificReturn := fake.commitReturnsOnCall[len(fake.commitArgsForCall)]
	fake.commitArgsForCall = append(fake.commitArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Commit", []interface{}{arg1, arg2, arg3})
	fake.commitMutex.Unlock()
	if fake.CommitStub != nil {
		return fake.CommitStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.commitReturns
	return fakeReturns.result1
}

func (fake *FakeRepo) CommitCallCount() int {
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	return len(fake.commitArgsForCall)
}

func (fake *FakeRepo) CommitCalls(stub func(string, string, string) error) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = stub
}

func (fake *FakeRepo) CommitArgsForCall(i int) (string, string, string) {
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	argsForCall := fake.commitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRepo) CommitReturns(result1 error) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = nil
	fake.commitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) CommitReturnsOnCall(i int, result1 error) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = nil
	if fake.commitReturnsOnCall == nil {
		fake.commitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) PushOrigin(arg1 auth.TokenProvider, arg2 string, arg3 string) error {
	fake.pushOriginMutex.Lock()
	ret, specificReturn := fake.pushOriginReturnsOnCall[len(fake.pushOriginArgsForCall)]
	fake.pushOriginArgsForCall = append(fake.pushOriginArgsForCall, struct {
		arg1 auth.TokenProvider
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("PushOrigin", []interface{}{arg1, arg2, arg3})
	fake.pushOriginMutex.Unlock()
	if fake.PushOriginStub != nil {
		return fake.PushOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pushOriginReturns
	return fakeReturns.result1
}

func (fake *FakeRepo) PushOriginCallCount() int {
	fake.pushOriginMutex.RLock()
	defer fake.pushOriginMutex.RUnlock()
	return len(fake.pushOriginArgsForCall)
}

func (fake *FakeRepo) PushOriginCalls(stub func(auth.TokenProvider, string, string) error) {
	fake.pushOriginMutex.Lock()
	defer fake.pushOriginMutex.Unlock()
	fake.PushOriginStub = stub
}

func (fake *FakeRepo) PushOriginArgsForCall(i int) (auth.TokenProvider, string, string) {
	fake.pushOriginMutex.RLock()
	defer fake.pushOriginMutex.RUnlock()
	argsForCall := fake.pushOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRepo) PushOriginReturns(result1 error) {
	fake.pushOriginMutex.Lock()
	defer fake.pushOriginMutex.Unlock()
	fake.PushOriginStub = nil
	fake.pushOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) PushOriginReturnsOnCall(i int, result1 error) {
	fake.pushOriginMutex.Lock()
	defer fake.pushOriginMutex.Unlock()
	fake.PushOriginStub = nil
	if fake.pushOriginReturnsOnCall == nil {
		fake.pushOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) SetOrigin(arg1 string) error {
	fake.setOriginMutex.Lock()
	ret, specificReturn := fake.setOriginReturnsOnCall[len(fake.setOriginArgsForCall)]
	fake.setOriginArgsForCall = append(fake.setOriginArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetOrigin", []interface{}{arg1})
	fake.setOriginMutex.Unlock()
	if fake.SetOriginStub != nil {
		return fake.SetOriginStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setOriginReturns
	return fakeReturns.result1
}

func (fake *FakeRepo) SetOriginCallCount() int {
	fake.setOriginMutex.RLock()
	defer fake.setOriginMutex.RUnlock()
	return len(fake.setOriginArgsForCall)
}

func (fake *FakeRepo) SetOriginCalls(stub func(string) error) {
	fake.setOriginMutex.Lock()
	defer fake.setOriginMutex.Unlock()
	fake.SetOriginStub = stub
}

func (fake *FakeRepo) SetOriginArgsForCall(i int) string {
	fake.setOriginMutex.RLock()
	defer fake.setOriginMutex.RUnlock()
	argsForCall := fake.setOriginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepo) SetOriginReturns(result1 error) {
	fake.setOriginMutex.Lock()
	defer fake.setOriginMutex.Unlock()
	fake.SetOriginStub = nil
	fake.setOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) SetOriginReturnsOnCall(i int, result1 error) {
	fake.setOriginMutex.Lock()
	defer fake.setOriginMutex.Unlock()
	fake.SetOriginStub = nil
	if fake.setOriginReturnsOnCall == nil {
		fake.setOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.checkoutMutex.RLock()
	defer fake.checkoutMutex.RUnlock()
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	fake.pushOriginMutex.RLock()
	defer fake.pushOriginMutex.RUnlock()
	fake.setOriginMutex.RLock()
	defer fake.setOriginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ git.Repo = new(FakeRepo)
